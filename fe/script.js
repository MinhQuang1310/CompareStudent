$(document).ready(function () {
    $("#files").change(function () {
        let files = $("#files")[0].files;
        let fileNames = [];

        for (let i = 0; i < files.length; i++) {
            fileNames.push(files[i].name);
        }

        if (fileNames.length > 0) {
            $("#fileNames").text("File ƒë√£ ch·ªçn: " + fileNames.join(", "));
        } else {
            $("#fileNames").text("");
        }
    });

    // H√†m reset l·∫°i b·∫£ng
    function resetTables() {
        // H·ªßy DataTable c≈© v√† x√≥a d·ªØ li·ªáu trong tbody
        if ($.fn.DataTable.isDataTable("#errorTable")) {
            $("#errorTable").DataTable().clear().destroy();
        }
        if ($.fn.DataTable.isDataTable("#table1")) {
            $("#table1").DataTable().clear().destroy();
        }
        if ($.fn.DataTable.isDataTable("#table2")) {
            $("#table2").DataTable().clear().destroy();
        }

        // X√≥a d·ªØ li·ªáu trong b·∫£ng
        $("#table1 tbody").empty();
        $("#table2 tbody").empty();
        $("#errorTable tbody").empty();
    }

    // X·ª≠ l√Ω khi t·∫£i l√™n file
    $("#uploadForm").submit(function (event) {
        event.preventDefault();

        let files = $("#files")[0].files;
        if (files.length != 2) {
            alert("Vui l√≤ng ch·ªâ ch·ªçn 2 file!");
            return;
        }

        let formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append("files", files[i]);
        }

        // Reset b·∫£ng tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
        resetTables();

        // G·ª≠i y√™u c·∫ßu t·∫£i file l√™n
        fetch("/upload", {
            method: "POST",
            body: formData
        })
            .then(response => response.json())
            .then(uploadResponse => {
                console.log("üìÇ Danh s√°ch file sau khi t·∫£i l√™n:", uploadResponse.files);
                return fetch('/get_data');  // G·ªçi ngay sau khi t·∫£i l√™n ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error("‚ùå L·ªói t·ª´ server:", data.error);
                    alert(data.error);
                    return;
                }

                // C·∫≠p nh·∫≠t t√™n file ƒë√∫ng t·ª´ server
                $("#file1Name").text(data.file1_name);
                $("#file2Name").text(data.file2_name);
                $("#file1ErrorNameCompare").text(data.file1_name);
                $("#file1ErrorClassCompare").text(data.file1_name);
                $("#file2ErrorNameCompare").text(data.file2_name);
                $("#file2ErrorClassCompare").text(data.file2_name);

                // Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√∫ng v√†o b·∫£ng
                populateTable("table1", data.file1);
                populateTable("table2", data.file2);
            })
            .catch(error => console.error("‚ùå L·ªói khi t·∫£i file ho·∫∑c l·∫•y d·ªØ li·ªáu:", error));
    });

    // H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o b·∫£ng
    function populateTable(tableId, data) {
        let tableBody = $("#" + tableId).find("tbody");
        tableBody.empty();  // ƒê·∫£m b·∫£o d·ªØ li·ªáu c≈© b·ªã x√≥a ho√†n to√†n
        data.forEach(row => {
            let tr = $("<tr>");
            tr.append(`<td>${row.MSSV}</td>`);
            tr.append(`<td>${row.HOTEN}</td>`);
            tr.append(`<td>${row.LOP}</td>`);
            tableBody.append(tr);
        });

        // Kh·ªüi t·∫°o l·∫°i DataTable sau khi th√™m d·ªØ li·ªáu m·ªõi
        $("#" + tableId).DataTable({
            "destroy": true,  // Ch·∫Øc ch·∫Øn reset b·∫£ng tr∆∞·ªõc khi t·∫°o m·ªõi
            "paging": true,
            "lengthChange": false,
            "pageLength": 10,
            "scrollY": "300px",
            "scrollCollapse": true,
            "searching": true,
            "ordering": true
        });
    }

    // H√†m so s√°nh d·ªØ li·ªáu
    window.compareData = function () {
        fetch('/compare')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error("‚ùå L·ªói t·ª´ server:", data.error);
                    alert(data.error);
                    return;
                }

                let errorTableBody = $("#errorTable").find("tbody");
                errorTableBody.empty();  // ‚úÖ X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t m·ªõi

                // C·∫≠p nh·∫≠t t√™n file trong ti√™u ƒë·ªÅ b·∫£ng so s√°nh
                $("#file1ErrorNameCompare").text(data.file1_name);
                $("#file1ErrorClassCompare").text(data.file1_name);
                $("#file2ErrorNameCompare").text(data.file2_name);
                $("#file2ErrorClassCompare").text(data.file2_name);

                if (data.errors.length === 0) {
                    alert("Kh√¥ng c√≥ l·ªói n√†o ƒë∆∞·ª£c t√¨m th·∫•y!");
                    return;
                }

                // Th√™m d·ªØ li·ªáu l·ªói v√†o b·∫£ng v√† hi·ªÉn th·ªã ghi ch√∫
                data.errors.forEach(row => {
                    let tr = $("<tr>");
                    let ghiChu = [];

                    // Ki·ªÉm tra h·ªç t√™n ·ªü file 1 v√† file 2
                    if (row.MSSV === "N/A") {
                        ghiChu.push("Ki·ªÉm tra l·∫°i MSSV");
                    } else if (row.HOTEN_file1 === "N/A" || row.LOP_file1 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y h·ªç t√™n v√† l·ªõp t·∫°i file ${data.file1_name}`);
                    } else if (row.HOTEN_file2 === "N/A" || row.LOP_file2 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y h·ªç t√™n v√† l·ªõp t·∫°i file ${data.file2_name}`);
                    } else if (row.HOTEN_file1 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y h·ªç t√™n t·∫°i file ${data.file1_name}`);
                    } else if (row.HOTEN_file2 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y h·ªç t√™n t·∫°i file ${data.file2_name}`);
                    } else if (row.LOP_file1 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y l·ªõp t·∫°i file ${data.file1_name}`);
                    } else if (row.LOP_file2 === "N/A") {
                        ghiChu.push(`Kh√¥ng t√¨m th·∫•y l·ªõp t·∫°i file ${data.file2_name}`);
                    } else if (row.HOTEN_file1 !== row.HOTEN_file2) {
                        ghiChu.push("Ki·ªÉm tra l·∫°i h·ªç t√™n");
                    } else if (row.LOP_file1 !== row.LOP_file2) {
                        ghiChu.push("Ki·ªÉm tra l·∫°i l·ªõp");
                    }

                    // Th√™m d·ªØ li·ªáu v√†o b·∫£ng, n·∫øu kh√¥ng c√≥ l·ªói th√¨ hi·ªÉn th·ªã "Kh√¥ng c√≥ l·ªói"
                    tr.append(`<td>${row.MSSV || "N/A"}</td>`);
                    tr.append(`<td>${row.HOTEN_file1 || "N/A"}</td>`);
                    tr.append(`<td>${row.LOP_file1 || "N/A"}</td>`);
                    tr.append(`<td>${row.HOTEN_file2 || "N/A"}</td>`);
                    tr.append(`<td>${row.LOP_file2 || "N/A"}</td>`);
                    tr.append(`<td>${ghiChu.length > 0 ? ghiChu.join(", ") : "Kh√¥ng c√≥ l·ªói"}</td>`);  // ‚úÖ Hi·ªÉn th·ªã ghi ch√∫
                    errorTableBody.append(tr);
                });

                // H·ªßy DataTable tr∆∞·ªõc khi kh·ªüi t·∫°o m·ªõi
                if ($.fn.DataTable.isDataTable("#errorTable")) {
                    $("#errorTable").DataTable().clear().destroy();
                }

                // Kh·ªüi t·∫°o l·∫°i DataTable
                $("#errorTable").DataTable({
                    "destroy": true,
                    "paging": true,
                    "lengthChange": false,
                    "pageLength": 10,
                    "scrollY": "300px",
                    "scrollCollapse": true,
                    "searching": true,
                    "ordering": true
                });

                console.log("‚úÖ B·∫£ng l·ªói ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
            })
            .catch(error => console.error("‚ùå L·ªói khi so s√°nh d·ªØ li·ªáu:", error));
    };
    window.downloadComparison = function () {
        // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ DataTable, kh√¥ng ph·ª• thu·ªôc v√†o ph√¢n trang
        let errors = [];
        $("#errorTable").DataTable().rows().every(function () {
            let row = this.data(); // L·∫•y d·ªØ li·ªáu c·ªßa m·ªôt d√≤ng trong DataTable
            let rowData = {};

            // Duy·ªát qua c√°c c·ªôt trong m·ªói d√≤ng v√† l·∫•y d·ªØ li·ªáu
            rowData["MSSV"] = row[0] || "N/A";
            rowData["HOTEN_file1"] = row[1] || "N/A";
            rowData["LOP_file1"] = row[2] || "N/A";
            rowData["HOTEN_file2"] = row[3] || "N/A";
            rowData["LOP_file2"] = row[4] || "N/A";
            rowData["Ghi_Chu"] = row[5];
            //rowData["Ghi_Chu"] = row[5] || "Kh√¥ng c√≥ l·ªói"; // C·ªôt ghi ch√∫

            errors.push(rowData); // Th√™m d√≤ng d·ªØ li·ªáu v√†o m·∫£ng
        });

        // G·ª≠i d·ªØ li·ªáu so s√°nh t·ªõi backend ƒë·ªÉ t·∫£i xu·ªëng file
        fetch('/download', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                errors: errors,
                file1_name: $("#file1Name").text(),  // L·∫•y t√™n file 1 t·ª´ UI
                file2_name: $("#file2Name").text()   // L·∫•y t√™n file 2 t·ª´ UI
            })
        })
            .then(response => response.blob())
            .then(blob => {
                // T·∫°o m·ªôt li√™n k·∫øt t·∫£i xu·ªëng cho file Excel
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'ket_qua_so_sanh.xlsx'; // T√™n file t·∫£i xu·ªëng
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error("L·ªói khi t·∫£i file:", error);
            });
    };
});
